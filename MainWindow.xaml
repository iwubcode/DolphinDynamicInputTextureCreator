<Window x:Class="DolphinDynamicInputTextureCreator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:converters="clr-namespace:DolphinDynamicInputTextureCreator.ValueConverters"
        xmlns:controls="clr-namespace:DolphinDynamicInputTextureCreator.Controls"
        xmlns:local="clr-namespace:DolphinDynamicInputTextureCreator"
        Closing="Window_Closing" 
        Title="Dolphin Dynamic Input Texture Creator" MinHeight="600" MinWidth="800">
    <Window.Resources>
        <ResourceDictionary>
            <BooleanToVisibilityConverter x:Key ="BooleanToVisibilityConverter"/>
        </ResourceDictionary>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="New" CanExecute="NewData_CanExecute" Executed="NewData_Click" />
        <CommandBinding Command="Open" CanExecute="OpenData_CanExecute" Executed="OpenData_Click" />
        <CommandBinding Command="Save" CanExecute="SaveData_CanExecute" Executed="SaveData_Click" />
        <CommandBinding Command="{x:Static local:MainWindow.SaveAsCmd}" CanExecute="SaveDataAs_CanExecute" Executed="SaveAsData_Click" />
    </Window.CommandBindings>
    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Header="_New" Command="New" Icon="{DynamicResource Icon.New}" />
                <MenuItem Header="_Open..." Command="Open" Icon="{DynamicResource Icon.Open}" />
                <Separator />
                <MenuItem Header="_Save" Command="Save"  Icon="{DynamicResource Icon.Save}"/>
                <MenuItem Header="_Save As..." Command="{x:Static local:MainWindow.SaveAsCmd}" Icon="{DynamicResource Icon.SaveAs}"/>
                <Separator />
                <MenuItem Header="_Export as Dolphin pack..." Click="ExportData_Click" Icon="{DynamicResource Icon.Export}" />
                <MenuItem Header="_Import from Dolphin pack..." Click="ImportData_Click" Icon="{DynamicResource Icon.Import}" />
                <Separator />
                <MenuItem Header="_Save Startup Settings" Icon="{DynamicResource Icon.Setting}">
                    <MenuItem Header="_Save Suggestions"  Click="SaveStartupSuggestions_Click"/>
                    <MenuItem Header="_Save as Default Pack"  Click="SaveAsDefaultPack_Click"/>
                </MenuItem>
                <Separator />
                <MenuItem Header="_Quit" Name="QuitProgram" Click="QuitProgram_Click" Icon="{DynamicResource Icon.Close}"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="_Emulated Devices..." Name="EditEmulatedDevices" Click="EditEmulatedDevices_Click" Icon="{DynamicResource Icon.EmulatedDevices}"/>
                <MenuItem Header="_Host Devices..." Name="EditHostDevices" Click="EditDefaultHostDevices_Click" Icon="{DynamicResource Icon.HostDevices}"/>
                <MenuItem Header="_Metadata..." Name="EditMetadata" Click="EditMetadata_Click" Icon="{DynamicResource Icon.Metadata}" />
                <MenuItem Header="_Tags..." Name="EditTags" Click="EditTags_Click" Icon="{DynamicResource Icon.EditTags}" />
            </MenuItem>
        </Menu>
        <Grid DockPanel.Dock="Left">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" MinWidth="90" MaxWidth="320"/>
                <ColumnDefinition Width="6*" />
            </Grid.ColumnDefinitions>
                <controls:TexturePicker></controls:TexturePicker>
            <Grid Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
                <StackPanel Orientation="Horizontal" Grid.Row="0">
                    <Path Width="25" Height="25" Fill="Gray" Data="{StaticResource Geometry.EmulatedDevices}" Margin="5 0 2 0"/>
                    <ComboBox ItemsSource="{Binding EmulatedDevices}" MinWidth="90" MaxWidth="130" x:Name="EmulatedDeviceCB" SelectedValue="{Binding SelectedRegionBrush.SelectedEmulatedDevice}" VerticalAlignment="Center"  Margin="2 0" ToolTip="Choose an emulated control">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock VerticalAlignment="Center" Text="{Binding Name}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                        <ComboBox.Style>
                            <Style TargetType="ComboBox">
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding EmulatedDevices.Count}" Value="0">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding SelectedRegionBrush.EditSubRegions}" Value="true">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                    </ComboBox>

                    <ToggleButton Margin="2 0" IsChecked="{Binding SelectedRegionBrush.UseKey}" BorderThickness="0">
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Grid Background="Transparent">
                                                <ContentPresenter/>
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Content" Value="{DynamicResource Icon.NoKey}" />
                                <Setter Property="ToolTip" Value="no key selected." />
                                    <Style.Triggers>
                                    <Trigger Property="IsChecked" Value="true">
                                        <Setter Property="Content" Value="{DynamicResource Icon.Key}" />
                                        <Setter Property="ToolTip" Value="Choose an key." />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    <ComboBox ItemsSource="{Binding ElementName=EmulatedDeviceCB, Path=SelectedItem.EmulatedKeys}" SelectedValue="{Binding SelectedRegionBrush.SelectedEmulatedKey, Delay=1}" VerticalAlignment="Center" MinWidth="90" MaxWidth="130" Margin="2 0" ToolTip="Choose an emulated key" Visibility="{Binding SelectedRegionBrush.UseKey, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock VerticalAlignment="Center" Text="{Binding Name}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                        <ComboBox.Style>
                            <Style TargetType="ComboBox">
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding SelectedRegionBrush.SelectedEmulatedDevice.EmulatedKeys.Count}" Value="0">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding EmulatedDevices.Count}" Value="0">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                    </ComboBox>

                    <ToggleButton Margin="2 0" IsChecked="{Binding SelectedRegionBrush.UseTag}" BorderThickness="0">
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Grid Background="Transparent">
                                                <ContentPresenter/>
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Content" Value="{DynamicResource Icon.NoTag}" />
                                <Setter Property="ToolTip" Value="no tag selected." />
                                <Style.Triggers>
                                    <Trigger Property="IsChecked" Value="true">
                                        <Setter Property="Content" Value="{DynamicResource Icon.Tag}" />
                                        <Setter Property="ToolTip" Value="Choose an tag." />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    <ComboBox ItemsSource="{Binding Tags}" SelectedValue="{Binding SelectedRegionBrush.SelectedTag}" VerticalAlignment="Center" MinWidth="90" MaxWidth="130" Margin="2 0" ToolTip="Choose an tag" Visibility="{Binding SelectedRegionBrush.UseTag, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock VerticalAlignment="Center" Text="{Binding Name}" />
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                        <ComboBox.Style>
                            <Style TargetType="ComboBox">
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Tags.Count}" Value="0">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding EmulatedDevices.Count}" Value="0">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                    </ComboBox>
                    
                    <Border BorderBrush="Gray" BorderThickness="0.3" Margin="2 0"/>
                    
                    <Button Margin="2,0" MinWidth="30" Height="20" Content="{DynamicResource Icon.FillRegion}" VerticalAlignment="Center" Command="{Binding FillRegionCommand}" ToolTip="Fill Region"/>

                    <Button Margin="2,0" Width="30" Height="20" Content="{StaticResource Icon.UpdateRegion}" VerticalAlignment="Center" Command="{Binding UpdateSelectedRegionCommand}" ToolTip="Update Region"/>

                    <ToggleButton Margin="2 0" Width="20" Height="20" IsChecked="{Binding IfCopyTypeOverwrite}" IsEnabled="{Binding IsRegionSelected}" >
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Content" Value="{DynamicResource Icon.RegionOverlay}" />
                                <Setter Property="ToolTip" Value="the region is placed on top of the texture." />
                                <Style.Triggers>
                                    <Trigger Property="IsChecked" Value="true">
                                        <Setter Property="Content" Value="{DynamicResource Icon.RegionOverwrite}" />
                                        <Setter Property="ToolTip" Value="the texture is overwritten by this region." />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>

                    <Button Margin="2,0" Width="20" Height="20" Content="{StaticResource Icon.RemoveRegion}" VerticalAlignment="Center" Command="{Binding DeleteSelectedRegionCommand}" ToolTip="Delete Region"/>

                    <Button Margin="2,0" Width="20" Height="20" Content="{StaticResource Icon.ArrowDown}" VerticalAlignment="Center" Command="{Binding MoveDownSelectedRegionCommand}" ToolTip="Move layer down" Visibility="{Binding SelectedRegionBrush.EditSubRegions, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    <Button Margin="2,0" Width="20" Height="20" Content="{StaticResource Icon.ArrowUp}" VerticalAlignment="Center" Command="{Binding MoveUpSelectedRegionCommand}" ToolTip="Move layer up" Visibility="{Binding SelectedRegionBrush.EditSubRegions, Converter={StaticResource BooleanToVisibilityConverter}}"/>

                    <Border BorderBrush="Gray" BorderThickness="0.3" Margin="2 0"/>
                    
                    <ToggleButton Margin="2 0" Height="20" IsChecked="{Binding SelectedRegionBrush.UseDarkBackground}" >
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Content" Value="{DynamicResource Icon.CanvasLight}" />
                                <Setter Property="ToolTip" Value="Use the Light Canvas." />
                                <Style.Triggers>
                                    <Trigger Property="IsChecked" Value="true">
                                        <Setter Property="Content" Value="{DynamicResource Icon.CanvasDark}" />
                                        <Setter Property="ToolTip" Value="Use the Dark Canvas." />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    
                    <ToggleButton Margin="2 0" Height="20" IsChecked="{Binding SelectedRegionBrush.Subpixel}">
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Content" Value="{DynamicResource Icon.Grid}" />
                                <Setter Property="ToolTip" Value="Use the default pixel grid." />
                                <Style.Triggers>
                                    <Trigger Property="IsChecked" Value="true">
                                        <Setter Property="Content" Value="{DynamicResource Icon.NoGrid}" />
                                        <Setter Property="ToolTip" Value="Use no pixel grid, allows the selection of sub pixels" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>

                    <ToggleButton Margin="2 0" Height="20" IsChecked="{Binding SelectedRegionBrush.EditSubRegions}">
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Content" Value="{DynamicResource Icon.SelectRegion}" />
                                <Setter Property="ToolTip" Value="edit main regions." />
                                <Style.Triggers>
                                    <Trigger Property="IsChecked" Value="true">
                                        <Setter Property="Content" Value="{DynamicResource Icon.SelectSubRegion}" />
                                        <Setter Property="ToolTip" Value="edit sub regions" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    
                </StackPanel>
                <controls:PanZoom x:Name="PanZoom" Grid.Row="1"></controls:PanZoom>
            </Grid>
            <GridSplitter Background="Gray" Grid.Column="1" Width="3" Height="200" ResizeDirection="Columns" HorizontalAlignment="Left"/>
        </Grid>
    </DockPanel>
</Window>