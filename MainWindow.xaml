<Window x:Class="DolphinDynamicInputTextureCreator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:converters="clr-namespace:DolphinDynamicInputTextureCreator.ValueConverters"
        xmlns:controls="clr-namespace:DolphinDynamicInputTextureCreator.Controls"
        xmlns:local="clr-namespace:DolphinDynamicInputTextureCreator"
        Closing="Window_Closing" 
        Title="Dolphin Dynamic Input Texture Creator" MinHeight="600" MinWidth="800">
    <Window.Resources>
        <ResourceDictionary>
            <Image x:Key="SaveAs" Source="Assets/SaveAs.png" />
            <Image x:Key="Save" Source="Assets/Save.png" />
            <Image x:Key="Open" Source="Assets/Open.png" />
            <Image x:Key="New" Source="Assets/New.png" />
            <Image x:Key="Import" Source="Assets/Import.png" />
            <Image x:Key="Export" Source="Assets/Export.png" />
            <Image x:Key="Close" Source="Assets/Close.png" />
            <Image x:Key="CanvasDark" Source="Assets/CanvasDark.png" />
            <Image x:Key="CanvasLight" Source="Assets/CanvasLight.png" />
            <Image x:Key="Subpixel" Source="Assets/Subpixel.png" />
            <Image x:Key="Grid" Source="Assets/Grid.png" />
        </ResourceDictionary>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="New" CanExecute="NewData_CanExecute" Executed="NewData_Click" />
        <CommandBinding Command="Open" CanExecute="OpenData_CanExecute" Executed="OpenData_Click" />
        <CommandBinding Command="Save" CanExecute="SaveData_CanExecute" Executed="SaveData_Click" />
        <CommandBinding Command="{x:Static local:MainWindow.SaveAsCmd}" CanExecute="SaveDataAs_CanExecute" Executed="SaveAsData_Click" />
    </Window.CommandBindings>
    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Header="_New" Command="New" Icon="{DynamicResource New}" />
                <MenuItem Header="_Open..." Command="Open" Icon="{DynamicResource Open}" />
                <Separator />
                <MenuItem Header="_Save" Command="Save"  Icon="{DynamicResource Save}"/>
                <MenuItem Header="_Save As..." Command="{x:Static local:MainWindow.SaveAsCmd}" Icon="{DynamicResource SaveAs}"/>
                <Separator />
                <MenuItem Header="_Export Dolphin Output to Location..." Name="ExportToLocation" Click="ExportToLocation_Click" Icon="{DynamicResource Export}" />
                <Separator />
                <MenuItem Header="_Save Startup Settings">
                    <MenuItem Header="_Save Suggestions"  Click="SaveStartupSuggestions_Click"/>
                    <MenuItem Header="_Save as Default Pack"  Click="SaveAsDefaultPack_Click"/>
                </MenuItem>
                <Separator />
                <MenuItem Header="_Quit" Name="QuitProgram" Click="QuitProgram_Click" Icon="{DynamicResource Close}"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="_Emulated Devices..." Name="EditEmulatedDevices" Click="EditEmulatedDevices_Click"  />
                <MenuItem Header="_Host Devices..." Name="EditHostDevices" Click="EditHostDevices_Click"   />
                <MenuItem Header="_Metadata..." Name="EditMetadata" Click="EditMetadata_Click"   />
            </MenuItem>
        </Menu>
        <Grid DockPanel.Dock="Left" Width="200">
            <controls:TexturePicker></controls:TexturePicker>
        </Grid>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <StackPanel Orientation="Horizontal" Grid.Row="0">
                <Label Content="Choose an emulated control to map in the texture:" Margin="0 0 5 0" />
                <ComboBox ItemsSource="{Binding EmulatedDevices}" Margin="0 0 0 0" Width="100" x:Name="EmulatedDeviceCB" SelectedValue="{Binding SelectedRegionBrush.SelectedEmulatedDevice}" VerticalAlignment="Center">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock VerticalAlignment="Center" Text="{Binding Name}" />
                            </StackPanel>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                    <ComboBox.Style>
                        <Style TargetType="ComboBox">
                            <Setter Property="IsEnabled" Value="True"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding EmulatedDevices.Count}" Value="0">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ComboBox.Style>
                </ComboBox>
                <Label Content="And key:" Margin="5 0 5 0" />
                <ComboBox ItemsSource="{Binding ElementName=EmulatedDeviceCB, Path=SelectedItem.EmulatedKeys}" SelectedValue="{Binding SelectedRegionBrush.SelectedEmulatedKey}" VerticalAlignment="Center" Width="120" Margin="0 0 5 0">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock VerticalAlignment="Center" Text="{Binding Name}" />
                            </StackPanel>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                    <ComboBox.Style>
                        <Style TargetType="ComboBox">
                            <Setter Property="IsEnabled" Value="True"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SelectedRegionBrush.SelectedEmulatedDevice.EmulatedKeys.Count}" Value="0">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding EmulatedDevices.Count}" Value="0">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ComboBox.Style>
                </ComboBox>
                <Button Margin="5,0,5,0" MinWidth="35" Content="Fill Region" VerticalAlignment="Center" Command="{Binding FillRegionCommand}"/>
                <ToggleButton Margin="2 0" Height="20" IsChecked="{Binding SelectedRegionBrush.UseDarkBackground}" >
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="Content" Value="{DynamicResource CanvasLight}" />
                            <Setter Property="ToolTip" Value="Use the Light Canvas." />
                            <Style.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Content" Value="{DynamicResource CanvasDark}" />
                                    <Setter Property="ToolTip" Value="Use the Dark Canvas." />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
                <ToggleButton Margin="2 0" Height="20" IsChecked="{Binding SelectedRegionBrush.Subpixel}">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="Content" Value="{DynamicResource Grid}" />
                            <Setter Property="ToolTip" Value="Use the default pixel grid." />
                            <Style.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Content" Value="{DynamicResource Subpixel}" />
                                    <Setter Property="ToolTip" Value="Use no pixel grid, allows the selection of sub pixels" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
            </StackPanel>
            <controls:PanZoom x:Name="PanZoom" Grid.Row="1"></controls:PanZoom>
        </Grid>
    </DockPanel>
</Window>